##
##
##
##
# THESE .LOG FILES CONTAINE MY TEST_DEV WORK FOR THE PROJECT!
# MANISH DEVGAN
##
##
##
##



----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
------------------------------LOG STARTS HERE-------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

# SOFTWARE USED : ENTHOUGHT CANOPY

KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=5, p=2,
           weights='uniform')

knn.predict(3,1,2,1)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-23-48bb6eafe588> in <module>()
----> 1 knn.predict(3,1,2,1)

TypeError: predict() takes exactly 2 arguments (5 given) 

knn.predict([3,1,2,1])
C:\Users\Manish\AppData\Local\Enthought\Canopy\User\lib\site-packages\sklearn\utils\validation.py:395: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.
  DeprecationWarning)
Out[24]: array(['Iris-setosa'], dtype=object)

knn.predict([3,1,2,3])
C:\Users\Manish\AppData\Local\Enthought\Canopy\User\lib\site-packages\sklearn\utils\validation.py:395: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.
  DeprecationWarning)
Out[25]: array(['Iris-versicolor'], dtype=object)

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 14
Eyes Detected: 14
Corped Eye: 
[[150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150
  150 150 150 150]
 [150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150
  150 150 150 150]
 [150 150 180 186 186 188 193 182 198 189 196 197 207 183 188 201 189 183
  191 190 189 150]
 [150 150 186 180 183 165 165 169 175 133 112 108 111 114 107 101 115 140
  161 173 173 150]
 [150 150 164 140  93  90  92  86  92  81  73  61  41  66  62  48  55  63
   87 129 143 150]
 [150 150  90  81  81 102 117 102  84  72  55  29  60  67  60  58  76  90
  102 121 120 150]
 [150 150 133 156 174 182 203 216 199 186 176 166 133 121 113 101  93 110
  124 114 122 150]
 [150 150 189 195 194 193 193 195 179 193 186 163 174 134 130 146 136 131
  138 134 138 150]
 [150 150 183 166 175 187 184 168 139 160 139  88  73  44  39  74 113 132
  135 131 143 150]
 [150 150 176 181 176 162 139 111  52  47  29   8   9  73  77  28  29  79
  113 124 136 150]
 [150 150 171 164 156 135  82  16   8  39  93 111  99 130 190 160  82  46
   97 122 118 150]
 [150 150 159 145 109  34  13  50  74  56  49  64  54 157 213 189 154  96
   85 126 129 150]
 [150 150 137 117  40  38  52  67  67  61  51  39  74 178 192 156 135  90
   58 106 161 150]
 [150 150 140 123 116 117 123 121 111 109 105  93  93 108  91  96 114 142
  135 143 177 150]
 [150 150 170 164 184 168 165 173 170 162 156 149 152 154 157 161 127 136
  152 167 161 150]
 [150 150 184 186 165 177 184 171 158 165 168 155 160 147 132 137 136 136
  132 140 154 150]
 [150 150 179 181 186 167 162 168 163 156 152 149 140 139 138 132 142 146
  163 179 162 150]
 [150 150 179 178 176 172 173 167 152 147 146 139 147 138 160 156 155 159
  179 159 163 150]
 [150 150 178 177 176 177 177 175 171 165 159 156 150 156 160 161 164 168
  165 159 163 150]
 [150 150 179 179 182 181 180 178 174 169 164 161 155 158 158 158 162 167
  166 161 164 150]
 [150 150 183 183 183 182 180 177 173 169 166 164 162 159 156 156 161 168
  169 166 168 150]
 [150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150
  150 150 150 150]]

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 11
Eyes Detected: 11
Corped Eye: 
[[150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150
  150 150 150 150]
 [150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150
  150 150 150 150]
 [150 150 180 186 186 188 193 182 198 189 196 197 207 183 188 201 189 183
  191 190 189 150]
 [150 150 186 180 183 165 165 169 175 133 112 108 111 114 107 101 115 140
  161 173 173 150]
 [150 150 164 140  93  90  92  86  92  81  73  61  41  66  62  48  55  63
   87 129 143 150]
 [150 150  90  81  81 102 117 102  84  72  55  29  60  67  60  58  76  90
  102 121 120 150]
 [150 150 133 156 174 182 203 216 199 186 176 166 133 121 113 101  93 110
  124 114 122 150]
 [150 150 189 195 194 193 193 195 179 193 186 163 174 134 130 146 136 131
  138 134 138 150]
 [150 150 183 166 175 187 184 168 139 160 139  88  73  44  39  74 113 132
  135 131 143 150]
 [150 150 176 181 176 162 139 111  52  47  29   8   9  73  77  28  29  79
  113 124 136 150]
 [150 150 171 164 156 135  82  16   8  39  93 111  99 130 190 160  82  46
   97 122 118 150]
 [150 150 159 145 109  34  13  50  74  56  49  64  54 157 213 189 154  96
   85 126 129 150]
 [150 150 137 117  40  38  52  67  67  61  51  39  74 178 192 156 135  90
   58 106 161 150]
 [150 150 140 123 116 117 123 121 111 109 105  93  93 108  91  96 114 142
  135 143 177 150]
 [150 150 170 164 184 168 165 173 170 162 156 149 152 154 157 161 127 136
  152 167 161 150]
 [150 150 184 186 165 177 184 171 158 165 168 155 160 147 132 137 136 136
  132 140 154 150]
 [150 150 179 181 186 167 162 168 163 156 152 149 140 139 138 132 142 146
  163 179 162 150]
 [150 150 179 178 176 172 173 167 152 147 146 139 147 138 160 156 155 159
  179 159 163 150]
 [150 150 178 177 176 177 177 175 171 165 159 156 150 156 160 161 164 168
  165 159 163 150]
 [150 150 179 179 182 181 180 178 174 169 164 161 155 158 158 158 162 167
  166 161 164 150]
 [150 150 183 183 183 182 180 177 173 169 166 164 162 159 156 156 161 168
  169 166 168 150]
 [150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150
  150 150 150 150]]

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 11
Eyes Detected: 11

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 14
Eyes Detected: 14

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 5
Eyes Detected: 5

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 5


 Welcome to Canopy's interactive data-analysis environment!
Type '?' for more information.

Eyes Detected: 5

import cv2

import cv2.face
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-2-f31cf48ae4a6> in <module>()
----> 1 import cv2.face

ImportError: No module named face 

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3



 Welcome to Canopy's interactive data-analysis environment!
Type '?' for more information.

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 8
Eyes Detected: 8

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 4
Eyes Detected: 4

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
C:\Users\Manish\Desktop\init.py in <module>()
     38     #print faces
     39     #print "\n"
---> 40     cv2.rectangle(image,(x,y),(x+(w*0.7),y+h),(0,255,0),2)
     41     #for (ex,ey,ew,eh) in eyes:
     42     #    cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)

TypeError: integer argument expected, got float 

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3


import cv2
import sys
import numpy as np
import os

imagePath = "test1.jpg"
eyePath = "haarcascade_eye.xml"
cascPath = "haarcascade_frontalface_default.xml"
os.chdir('C:\Users\Manish\Desktop')
faceCascade = cv2.CascadeClassifier(cascPath)
eyeCascade = cv2.CascadeClassifier(eyePath)
image = cv2.imread(imagePath)
#cv2.imshow('asda',image)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

#cv2.imshow('asa',gray)

faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)

eyes = eyeCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)
print "faces detected: {0}".format(len(faces))
print "Eyes Detected: {0}".format(len(faces))
i = 0
for (x,y,w,h) in faces:
    #print faces 
    #print "\n"
    cv2.rectangle(image,(x,y),(x+int(w*0.85),y+h),(0,255,0),2)
    #for (ex,ey,ew,eh) in eyes:
    #    cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)      


#print type(faces[0][0])
cv2.imshow('FacesFound', image)
cv2.waitKey(0)

#corp_im = image[150:172,188:210]



#print "Corped Eye: "
#corp_gray = cv2.cvtColor(corp_im,cv2.COLOR_BGR2GRAY)
#cv2.imshow('sadasda',corp_gray)

#print corp_gray

faces detected: 3
Eyes Detected: 3
Out[8]: -1

faces[0]
Out[9]: array([ 12, 235,  24,  24])

faces[1]
Out[10]: array([249, 123, 252, 252])

type(faces[1])
Out[11]: numpy.ndarray

a = []

a = array(a)

type(a)
Out[14]: numpy.ndarray

a = faces[1]

a = np.copy(faces[1])

a 
Out[17]: array([249, 123, 252, 252])

a = [for _ in range(11)]
  File "<ipython-input-18-0fc5ba53cf96>", line 1
    a = [for _ in range(11)]
           ^
SyntaxError: invalid syntax
 

a = [i for _ in range(11)]

a
Out[20]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

a = [i for i in range(11)]

a
Out[22]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

faces[0]
Out[23]: array([ 12, 235,  24,  24])

faces[0][1]
Out[24]: 235

faces[0][0]
Out[25]: 12

a=[24][24]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-26-ff9698bb2837> in <module>()
----> 1 a=[24][24]

IndexError: list index out of range 

a=[24[24]]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-27-fa5abde90b29> in <module>()
----> 1 a=[24[24]]

TypeError: 'int' object has no attribute '__getitem__' 

a=[[0 for x in range(24)] for y in range(24)]

a
Out[29]: 
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

a=[[0 for x in range(3)] for y in range(24)]

a
Out[31]: 
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]

len(faces[0])
Out[32]: 4

len(faces)
Out[33]: 3

len(a)
Out[34]: 24

faces
Out[35]: 
array([[ 12, 235,  24,  24],
       [249, 123, 252, 252],
       [667, 163, 252, 252]])

len(image)
Out[36]: 768

a=[[[0,0,0] for x in range(3)] for y in range(24)]

a
Out[38]: 
[[[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]

len(a)
Out[39]: 24

image
Out[40]: 
array([[[46, 36, 12],
        [46, 36, 12],
        [46, 36, 12],
        ..., 
        [20, 17, 12],
        [20, 17, 12],
        [20, 17, 12]],

       [[46, 36, 12],
        [46, 36, 12],
        [46, 36, 12],
        ..., 
        [20, 17, 12],
        [20, 17, 12],
        [20, 17, 12]],

       [[46, 36, 12],
        [46, 36, 12],
        [46, 36, 12],
        ..., 
        [20, 17, 12],
        [20, 17, 12],
        [20, 17, 12]],

       ..., 
       [[30, 30, 24],
        [30, 30, 24],
        [30, 30, 24],
        ..., 
        [ 9, 10,  6],
        [11, 10,  6],
        [13, 10,  6]],

       [[29, 29, 23],
        [29, 29, 23],
        [29, 29, 23],
        ..., 
        [ 9, 10,  6],
        [11, 10,  6],
        [13, 10,  6]],

       [[28, 28, 22],
        [28, 28, 22],
        [29, 29, 23],
        ..., 
        [10, 11,  7],
        [11, 10,  6],
        [13, 10,  6]]], dtype=uint8)

a
Out[41]: 
[[[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]

faces[0]
Out[42]: array([ 12, 235,  24,  24])

a=[[[0,0,0] for x in range(24)] for y in range(24)]

a
Out[44]: 
[[[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]],
 [[0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0],
  [0, 0, 0]]]

len(a)
Out[45]: 24

len(a[0])
Out[46]: 24

a[0][0]
Out[47]: [0, 0, 0]

a[0][0][1]
Out[48]: 0

cls


faces[0]
Out[50]: array([ 12, 235,  24,  24])

12+24
Out[51]: 36

235+24
Out[52]: 259

for i in range(12,36):
    print image[i][0]
    
[48 38 14]
[48 38 14]
[48 38 14]
[48 38 14]
[47 37 13]
[47 37 13]
[47 37 13]
[47 37 13]
[48 38 14]
[49 39 15]
[50 40 16]
[50 40 16]
[51 41 17]
[51 41 17]
[52 42 18]
[52 42 18]
[52 42 18]
[55 45 21]
[58 48 24]
[60 50 26]
[64 53 31]
[65 54 32]
[68 55 33]
[69 55 36]

for i in range(12,36):
    print image[i][0]
    
[48 38 14]
[48 38 14]
[48 38 14]
[48 38 14]
[47 37 13]
[47 37 13]
[47 37 13]
[47 37 13]
[48 38 14]
[49 39 15]
[50 40 16]
[50 40 16]
[51 41 17]
[51 41 17]
[52 42 18]
[52 42 18]
[52 42 18]
[55 45 21]
[58 48 24]
[60 50 26]
[64 53 31]
[65 54 32]
[68 55 33]
[69 55 36]

len(range(12,36))
Out[55]: 24

range(12,36)
Out[56]: 
[12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 31,
 32,
 33,
 34,
 35]

for i in range(12,36):
    print image[i][0]
    
[48 38 14]
[48 38 14]
[48 38 14]
[48 38 14]
[47 37 13]
[47 37 13]
[47 37 13]
[47 37 13]
[48 38 14]
[49 39 15]
[50 40 16]
[50 40 16]
[51 41 17]
[51 41 17]
[52 42 18]
[52 42 18]
[52 42 18]
[55 45 21]
[58 48 24]
[60 50 26]
[64 53 31]
[65 54 32]
[68 55 33]
[69 55 36]

for i in range(12,36):
    for j in range(235,259):
        print image[i][j]
        
[10 14  9]
[10 14  9]
[10 14  9]
[10 14  9]
[ 9 13  8]
[ 9 13  8]
[10 14  9]
[11 15 10]
[13 17 12]
[14 18 13]
[14 18 13]
[12 16 11]
[10 14  9]
[10 14  9]
[10 14  9]
[ 9 13  8]
[10 14  9]
[10 14  9]
[11 15 10]
[11 15 10]
[10 14  9]
[12 16 11]
[12 16 11]
[13 17 12]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[11 12  8]
[11 12  8]
[12 13  9]
[12 13  9]
[13 14 10]
[14 15 11]
[15 16 12]
[16 17 13]
[17 18 14]
[16 17 13]
[15 16 12]
[15 16 12]
[15 16 12]
[14 15 11]
[14 15 11]
[13 14 10]
[12 13  9]
[13 14 10]
[13 14 10]
[12 13  9]
[11 12  8]
[11 12  8]
[11 12  8]
[11 12  8]
[11 12  8]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[14 15 11]
[17 18 14]
[19 20 16]
[21 22 18]
[20 21 17]
[19 20 16]
[18 19 15]
[17 18 14]
[16 17 13]
[15 16 12]
[14 15 11]
[13 14 10]
[13 14 10]
[14 15 11]
[11 12  8]
[11 12  8]
[11 12  8]
[10 11  7]
[10 11  7]
[ 9 10  6]
[10 11  7]
[11 12  8]
[11 12  8]
[10 11  7]
[11 12  8]
[14 15 11]
[16 17 13]
[17 18 14]
[17 18 14]
[16 17 13]
[15 16 12]
[15 16 12]
[14 15 11]
[13 14 10]
[12 13  9]
[12 13  9]
[13 14 10]
[13 14 10]
[11 12  8]
[10 11  7]
[10 11  7]
[10 11  7]
[ 9 10  6]
[ 9 10  6]
[10 11  7]
[10 11  7]
[10 11  7]
[11 12  8]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[13 14 10]
[13 14 10]
[14 15 11]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[11 12  8]
[11 12  8]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[13 14 10]
[13 14 10]
[13 14 10]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[10 11  7]
[11 12  8]
[11 12  8]
[11 12  8]
[11 12  8]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[12 13  9]
[10 12  6]
[10 12  6]
[10 12  6]
[10 12  6]
[10 12  6]
[10 12  6]
[11 13  7]
[11 13  7]
[11 13  7]
[11 13  7]
[11 13  7]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 13  9]
[12 13  9]
[12 14  8]
[10 12  6]
[10 12  6]
[10 12  6]
[10 12  6]
[10 12  6]
[10 12  6]
[11 13  7]
[11 13  7]
[11 13  7]
[11 13  7]
[11 13  7]
[11 13  7]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 14  8]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[11 11  5]
[12 12  6]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[12 12  6]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[10 10  4]
[11 11  5]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[13 13  7]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[15 15  9]
[14 14  8]
[14 14  8]
[12 12  6]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[10 10  4]
[11 11  5]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[13 13  7]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[14 14  8]
[15 15  9]
[15 15  9]
[15 15  9]
[12 12  6]
[12 12  6]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[12 12  6]
[12 12  6]
[12 12  6]
[13 13  7]
[13 13  7]
[13 13  7]
[14 13  9]
[14 13  9]
[14 13  9]
[14 13  9]
[14 13  9]
[14 13  9]
[14 13  9]
[14 13  9]
[14 15  6]
[14 15  6]
[14 15  6]
[12 12  6]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[11 11  5]
[12 12  6]
[12 12  6]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 14  5]
[13 14  5]
[13 14  5]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[12 13  4]
[12 13  4]
[13 14  5]
[13 14  5]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 14  5]
[13 14  5]
[13 14  5]
[11 12  2]
[11 12  2]
[11 12  2]
[11 12  2]
[11 12  2]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[12 13  4]
[12 13  4]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[10 11  1]
[10 11  1]
[11 12  2]
[11 12  2]
[11 12  2]
[11 12  3]
[11 12  3]
[11 12  3]
[11 12  3]
[12 13  4]
[12 13  4]
[13 14  5]
[13 14  5]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  5]
[13 14  5]
[13 14  5]
[10 11  1]
[10 11  1]
[11 12  2]
[11 12  2]
[11 12  2]
[11 12  2]
[11 12  2]
[12 13  3]
[12 13  3]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  4]
[13 14  5]
[13 14  5]
[13 14  5]
[10 11  2]
[10 11  2]
[10 11  2]
[11 12  3]
[11 12  3]
[11 12  2]
[12 13  3]
[12 13  3]
[13 14  4]
[13 14  4]
[14 15  5]
[13 14  4]
[13 14  4]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  4]
[13 14  4]
[13 14  4]
[ 9 10  1]
[10 11  2]
[10 11  2]
[11 12  3]
[11 12  3]
[11 12  2]
[12 13  3]
[13 14  4]
[14 15  5]
[14 15  5]
[14 15  5]
[13 14  4]
[13 14  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  3]
[12 13  3]
[12 13  3]
[ 9 10  1]
[ 9 10  1]
[10 11  2]
[11 12  3]
[12 13  4]
[12 13  4]
[12 13  4]
[13 14  5]
[14 15  6]
[15 16  7]
[15 16  7]
[13 14  5]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[13 14  5]
[12 13  4]
[12 13  4]
[12 13  4]
[ 9 10  1]
[ 9 10  1]
[10 11  2]
[11 12  3]
[11 12  3]
[12 13  4]
[12 13  4]
[13 14  5]
[14 15  6]
[14 15  6]
[14 15  6]
[13 14  5]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[10 11  2]
[10 11  2]
[10 11  2]
[11 12  3]
[11 12  3]
[12 13  4]
[12 13  4]
[12 13  4]
[13 14  5]
[13 14  5]
[13 14  5]
[13 14  5]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[12 13  4]
[10 10  4]
[10 10  4]
[11 11  5]
[11 11  5]
[12 12  6]
[12 12  6]
[12 12  6]
[11 11  5]
[11 11  5]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[13 13  7]
[12 12  6]
[12 12  6]
[12 12  6]

for i in range(12,36):
    print image[i][235]
    
[10 14  9]
[12 13  9]
[12 13  9]
[11 12  8]
[11 12  8]
[10 11  7]
[10 11  7]
[10 12  6]
[10 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[12 12  6]
[11 12  3]
[11 12  2]
[10 11  1]
[10 11  1]
[10 11  2]
[ 9 10  1]
[ 9 10  1]
[ 9 10  1]
[10 11  2]
[10 10  4]

k = 0
l = 0
for i in range(12,36):
    for j in range(235,259):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-60-2fdb4fae8110> in <module>()
      4     for j in range(235,259):
      5         #print image[i][j]
----> 6         a[k][l][0] = image[i][j][0]
      7         a[k][l][1] = image[i][j][1]
      8         a[k][l][2] = image[i][j][2]

IndexError: list index out of range 

a[0][0][0]
Out[61]: 10

k = 0
l = 0
for i in range(12,36):
    l = 0
    for j in range(235,259):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    

a
Out[63]: 
[[[10, 14, 9],
  [10, 14, 9],
  [10, 14, 9],
  [10, 14, 9],
  [9, 13, 8],
  [9, 13, 8],
  [10, 14, 9],
  [11, 15, 10],
  [13, 17, 12],
  [14, 18, 13],
  [14, 18, 13],
  [12, 16, 11],
  [10, 14, 9],
  [10, 14, 9],
  [10, 14, 9],
  [9, 13, 8],
  [10, 14, 9],
  [10, 14, 9],
  [11, 15, 10],
  [11, 15, 10],
  [10, 14, 9],
  [12, 16, 11],
  [12, 16, 11],
  [13, 17, 12]],
 [[12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [11, 12, 8],
  [11, 12, 8],
  [12, 13, 9],
  [12, 13, 9],
  [13, 14, 10],
  [14, 15, 11],
  [15, 16, 12],
  [16, 17, 13],
  [17, 18, 14],
  [16, 17, 13],
  [15, 16, 12],
  [15, 16, 12],
  [15, 16, 12],
  [14, 15, 11],
  [14, 15, 11],
  [13, 14, 10],
  [12, 13, 9],
  [13, 14, 10],
  [13, 14, 10]],
 [[12, 13, 9],
  [11, 12, 8],
  [11, 12, 8],
  [11, 12, 8],
  [11, 12, 8],
  [11, 12, 8],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [14, 15, 11],
  [17, 18, 14],
  [19, 20, 16],
  [21, 22, 18],
  [20, 21, 17],
  [19, 20, 16],
  [18, 19, 15],
  [17, 18, 14],
  [16, 17, 13],
  [15, 16, 12],
  [14, 15, 11],
  [13, 14, 10],
  [13, 14, 10],
  [14, 15, 11]],
 [[11, 12, 8],
  [11, 12, 8],
  [11, 12, 8],
  [10, 11, 7],
  [10, 11, 7],
  [9, 10, 6],
  [10, 11, 7],
  [11, 12, 8],
  [11, 12, 8],
  [10, 11, 7],
  [11, 12, 8],
  [14, 15, 11],
  [16, 17, 13],
  [17, 18, 14],
  [17, 18, 14],
  [16, 17, 13],
  [15, 16, 12],
  [15, 16, 12],
  [14, 15, 11],
  [13, 14, 10],
  [12, 13, 9],
  [12, 13, 9],
  [13, 14, 10],
  [13, 14, 10]],
 [[11, 12, 8],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [9, 10, 6],
  [9, 10, 6],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [11, 12, 8],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [13, 14, 10],
  [13, 14, 10],
  [14, 15, 11]],
 [[10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [11, 12, 8],
  [11, 12, 8],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [13, 14, 10],
  [13, 14, 10],
  [13, 14, 10]],
 [[10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [10, 11, 7],
  [11, 12, 8],
  [11, 12, 8],
  [11, 12, 8],
  [11, 12, 8],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9],
  [12, 13, 9]],
 [[10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 13, 9],
  [12, 13, 9],
  [12, 14, 8]],
 [[10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [10, 12, 6],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [11, 13, 7],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8],
  [12, 14, 8]],
 [[12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [11, 11, 5],
  [12, 12, 6],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8]],
 [[12, 12, 6],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [10, 10, 4],
  [11, 11, 5],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [13, 13, 7],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [15, 15, 9],
  [14, 14, 8],
  [14, 14, 8]],
 [[12, 12, 6],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [10, 10, 4],
  [11, 11, 5],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [13, 13, 7],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [14, 14, 8],
  [15, 15, 9],
  [15, 15, 9],
  [15, 15, 9]],
 [[12, 12, 6],
  [12, 12, 6],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [14, 13, 9],
  [14, 13, 9],
  [14, 13, 9],
  [14, 13, 9],
  [14, 13, 9],
  [14, 13, 9],
  [14, 13, 9],
  [14, 13, 9],
  [14, 15, 6],
  [14, 15, 6],
  [14, 15, 6]],
 [[12, 12, 6],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [11, 11, 5],
  [12, 12, 6],
  [12, 12, 6],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5]],
 [[11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5]],
 [[11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5]],
 [[10, 11, 1],
  [10, 11, 1],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 3],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5]],
 [[10, 11, 1],
  [10, 11, 1],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [11, 12, 2],
  [12, 13, 3],
  [12, 13, 3],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5]],
 [[10, 11, 2],
  [10, 11, 2],
  [10, 11, 2],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 2],
  [12, 13, 3],
  [12, 13, 3],
  [13, 14, 4],
  [13, 14, 4],
  [14, 15, 5],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 4],
  [13, 14, 4],
  [13, 14, 4]],
 [[9, 10, 1],
  [10, 11, 2],
  [10, 11, 2],
  [11, 12, 3],
  [11, 12, 3],
  [11, 12, 2],
  [12, 13, 3],
  [13, 14, 4],
  [14, 15, 5],
  [14, 15, 5],
  [14, 15, 5],
  [13, 14, 4],
  [13, 14, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 3],
  [12, 13, 3],
  [12, 13, 3]],
 [[9, 10, 1],
  [9, 10, 1],
  [10, 11, 2],
  [11, 12, 3],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [14, 15, 6],
  [15, 16, 7],
  [15, 16, 7],
  [13, 14, 5],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4]],
 [[9, 10, 1],
  [9, 10, 1],
  [10, 11, 2],
  [11, 12, 3],
  [11, 12, 3],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [14, 15, 6],
  [14, 15, 6],
  [14, 15, 6],
  [13, 14, 5],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4]],
 [[10, 11, 2],
  [10, 11, 2],
  [10, 11, 2],
  [11, 12, 3],
  [11, 12, 3],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [13, 14, 5],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4],
  [12, 13, 4]],
 [[10, 10, 4],
  [10, 10, 4],
  [11, 11, 5],
  [11, 11, 5],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [11, 11, 5],
  [11, 11, 5],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [13, 13, 7],
  [12, 12, 6],
  [12, 12, 6],
  [12, 12, 6]]]

cv2.imshow('asas',a)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-64-6fb75af7f8d0> in <module>()
----> 1 cv2.imshow('asas',a)

TypeError: mat is not a numpy array, neither a scalar 

type(a)
Out[65]: list

a = array(a)

cv2.imshow('asas',a)

a
Out[68]: 
array([[[10, 14,  9],
        [10, 14,  9],
        [10, 14,  9],
        ..., 
        [12, 16, 11],
        [12, 16, 11],
        [13, 17, 12]],

       [[12, 13,  9],
        [12, 13,  9],
        [12, 13,  9],
        ..., 
        [12, 13,  9],
        [13, 14, 10],
        [13, 14, 10]],

       [[12, 13,  9],
        [11, 12,  8],
        [11, 12,  8],
        ..., 
        [13, 14, 10],
        [13, 14, 10],
        [14, 15, 11]],

       ..., 
       [[ 9, 10,  1],
        [ 9, 10,  1],
        [10, 11,  2],
        ..., 
        [12, 13,  4],
        [12, 13,  4],
        [12, 13,  4]],

       [[10, 11,  2],
        [10, 11,  2],
        [10, 11,  2],
        ..., 
        [12, 13,  4],
        [12, 13,  4],
        [12, 13,  4]],

       [[10, 10,  4],
        [10, 10,  4],
        [11, 11,  5],
        ..., 
        [12, 12,  6],
        [12, 12,  6],
        [12, 12,  6]]], dtype=uint8)

type(a)
Out[69]: numpy.ndarray

cv2.imshow('asas',a)

cv2.imshow('asas',a)

cv2.imshow('asas',image)

faces
Out[73]: 
array([[ 12, 235,  24,  24],
       [249, 123, 252, 252],
       [667, 163, 252, 252]])

k = 0
l = 0
for i in range(249,249+252):
    l = 0
    for j in range(123,123+252):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-74-4b5f15229e45> in <module>()
      5     for j in range(123,123+252):
      6         #print image[i][j]
----> 7         a[k][l][0] = image[i][j][0]
      8         a[k][l][1] = image[i][j][1]
      9         a[k][l][2] = image[i][j][2]

IndexError: index 24 is out of bounds for axis 0 with size 24 

a=[[[0,0,0] for x in range(252)] for y in range(252)]

k = 0
l = 0
for i in range(249,249+252):
    l = 0
    for j in range(123,123+252):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    

type(a)
Out[77]: list

a = array(a)

cv2.imshow('asas',a)

k = 0
l = 0
for i in range(123,123+252):
    l = 0
    for j in range(249,249+252):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    

type(a)
Out[81]: numpy.ndarray

a = array(a)

type(a)
Out[83]: numpy.ndarray

cv2.imshow('as213as',a)

k = 0
l = 0
for i in range(123,123+252):
    l = 0
    for j in range(249,249+int(252*0.85)):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    

cv2.imshow('as213as',a)

cv2.imshow('as213as',a)

a=[[[0,0,0] for x in range(int(252*0.85))] for y in range(252)]

k = 0
l = 0
for i in range(123,123+252):
    l = 0
    for j in range(249,249+int(252*0.85)):
        #print image[i][j]
        a[k][l][0] = image[i][j][0]
        a[k][l][1] = image[i][j][1]
        a[k][l][2] = image[i][j][2]
        l = l + 1
    k = k + 1
    

a



 Welcome to Canopy's interactive data-analysis environment!
Type '?' for more information.

252*0.85
Out[1]: 214.2

int(252*0.85)
Out[2]: 214


import cv2
import sys
import numpy as np
import os

imagePath = "test1.jpg"
eyePath = "haarcascade_eye.xml"
cascPath = "haarcascade_frontalface_default.xml"
os.chdir('C:\Users\Manish\Desktop')
faceCascade = cv2.CascadeClassifier(cascPath)
eyeCascade = cv2.CascadeClassifier(eyePath)
image = cv2.imread(imagePath)
#cv2.imshow('asda',image)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

#cv2.imshow('asa',gray)

faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)

eyes = eyeCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)
print "faces detected: {0}".format(len(faces))
print "Eyes Detected: {0}".format(len(faces))
i = 0
for (x,y,w,h) in faces:
    #print faces 
    #print "\n"
    cv2.rectangle(image,(x,y),(x+int(w*0.85),y+h),(0,255,0),2)
    #for (ex,ey,ew,eh) in eyes:
    #    cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)      


#print type(faces[0][0])
cv2.imshow('FacesFound', image)
cv2.waitKey(0)

#corp_im = image[150:172,188:210]



#print "Corped Eye: "
#corp_gray = cv2.cvtColor(corp_im,cv2.COLOR_BGR2GRAY)
#cv2.imshow('sadasda',corp_gray)

#print corp_gray


faces detected: 3
Eyes Detected: 3
Out[3]: -1

faces[0]
Out[4]: array([ 12, 235,  24,  24])

faces[1]
Out[5]: array([249, 123, 252, 252])

a = image[123:375,249:501]

type(a)
Out[7]: numpy.ndarray

cv2.imshow('asd',a)

a = image[123:123+214,249:501]

cv2.imshow('asd',a)

cv2.imshow('asd',a)

a = image[123:375,249:501]

a = image[123:375,249:249+214]

cv2.imshow('asdsda',a)

faces
Out[15]: 
array([[ 12, 235,  24,  24],
       [249, 123, 252, 252],
       [667, 163, 252, 252]])

image[163:163+252,667:667+214] = a

cv2.imshow('asdasd',image)

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3


import cv2
import sys
import numpy as np
import os

imagePath = "test1.jpg"
eyePath = "haarcascade_eye.xml"
cascPath = "haarcascade_frontalface_default.xml"
os.chdir('C:\Users\Manish\Desktop')
faceCascade = cv2.CascadeClassifier(cascPath)
eyeCascade = cv2.CascadeClassifier(eyePath)
image = cv2.imread(imagePath)
#cv2.imshow('asda',image)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

#cv2.imshow('asa',gray)

faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)

eyes = eyeCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)
print "faces detected: {0}".format(len(faces))
print "Eyes Detected: {0}".format(len(faces))
i = 0
for (x,y,w,h) in faces:
    #print faces 
    #print "\n"
    cv2.rectangle(image,(x+int(w*0.15),y+int(h*0.15)),(x+int(w*0.80),y+int(h*0.90)),(0,255,0),2)
    #for (ex,ey,ew,eh) in eyes:
    #    cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)      


#print type(faces[0][0])
cv2.imshow('FacesFound', image)
cv2.waitKey(0)

#corp_im = image[150:172,188:210]



#print "Corped Eye: "
#corp_gray = cv2.cvtColor(corp_im,cv2.COLOR_BGR2GRAY)
#cv2.imshow('sadasda',corp_gray)

#print corp_gray

faces detected: 3
Eyes Detected: 3
Out[24]: -1

faces
Out[25]: 
array([[ 12, 235,  24,  24],
       [249, 123, 252, 252],
       [667, 163, 252, 252]])

salman = image[123+int(252*0.15):214,249+int(252*0.15):214]

shahrukh = image[163+int(252*0.15):163+214,667+int(252*0.15):667+214]

salman = image[123+int(252*0.15):123+214,249+int(252*0.15):249+214]

cv2.imshow('',salman)

252*0.9
Out[30]: 226.8

salman = image[123+int(252*0.15):123+226,249+int(252*0.15):249+214]

cv2.imshow('',salman)

252*0.8
Out[33]: 201.60000000000002

salman = image[123+int(252*0.15):123+226,249+int(252*0.15):249+201]

cv2.imshow('',salman)

shahrukh = image[163+int(252*0.15):163+226,667+int(252*0.15):667+201]

cv2.imshow('',shahrukh)

image[163+int(252*0.15):163+226,667+int(252*0.15):667+201] = salman

image[123+int(252*0.15):123+226,249+int(252*0.15):249+201]=shahrukh

cv2.imshow('',image)

cv2.imshow('',shahrukh)

cv2.imshow('',img)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-42-81ac7bf75722> in <module>()
----> 1 cv2.imshow('',img)

NameError: name 'img' is not defined 

cv2.imshow('',image)


import cv2
import sys
import numpy as np
import os

imagePath = "test1.jpg"
eyePath = "haarcascade_eye.xml"
cascPath = "haarcascade_frontalface_default.xml"
os.chdir('C:\Users\Manish\Desktop')
faceCascade = cv2.CascadeClassifier(cascPath)
eyeCascade = cv2.CascadeClassifier(eyePath)
image = cv2.imread(imagePath)
#cv2.imshow('asda',image)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

#cv2.imshow('asa',gray)

faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)

eyes = eyeCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)
print "faces detected: {0}".format(len(faces))
print "Eyes Detected: {0}".format(len(faces))
i = 0
for (x,y,w,h) in faces:
    #print faces 
    #print "\n"
    cv2.rectangle(image,(x+int(w*0.15),y+int(h*0.15)),(x+int(w*0.80),y+int(h*0.90)),(0,255,0),2)
    #for (ex,ey,ew,eh) in eyes:
    #    cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)      


#print type(faces[0][0])
cv2.imshow('FacesFound', image)
cv2.waitKey(0)

#corp_im = image[150:172,188:210]



#print "Corped Eye: "
#corp_gray = cv2.cvtColor(corp_im,cv2.COLOR_BGR2GRAY)
#cv2.imshow('sadasda',corp_gray)

#print corp_gray

faces detected: 3
Eyes Detected: 3
Out[44]: -1

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 1
Eyes Detected: 1

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 4
Eyes Detected: 4

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 0
Eyes Detected: 0

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3


import cv2
import sys
import numpy as np
import os

imagePath = "sample4.jpg"
eyePath = "haarcascade_eye.xml"
cascPath = "haarcascade_frontalface_default.xml"
os.chdir('C:\Users\Manish\Desktop')
faceCascade = cv2.CascadeClassifier(cascPath)
eyeCascade = cv2.CascadeClassifier(eyePath)
image = cv2.imread(imagePath)
#cv2.imshow('asda',image)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

#cv2.imshow('asa',gray)

faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)

eyes = eyeCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)
print "faces detected: {0}".format(len(faces))
print "Eyes Detected: {0}".format(len(faces))
i = 0
for (x,y,w,h) in faces:
    #print faces 
    #print "\n"
    #cv2.rectangle(image,(x+int(w*0.15),y+int(h*0.15)),(x+int(w*0.80),y+int(h*0.90)),(0,255,0),2)
    for (ex,ey,ew,eh) in eyes:
        cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)      


#print type(faces[0][0])
cv2.imshow('FacesFound', image)
cv2.waitKey(0)

#corp_im = image[150:172,188:210]



#print "Corped Eye: "
#corp_gray = cv2.cvtColor(corp_im,cv2.COLOR_BGR2GRAY)
#cv2.imshow('sadasda',corp_gray)

#print corp_gray
import cv2
import sys
import numpy as np
import os

imagePath = "sample4.jpg"
eyePath = "haarcascade_eye.xml"
cascPath = "haarcascade_frontalface_default.xml"
os.chdir('C:\Users\Manish\Desktop')
faceCascade = cv2.CascadeClassifier(cascPath)
eyeCascade = cv2.CascadeClassifier(eyePath)
image = cv2.imread(imagePath)
#cv2.imshow('asda',image)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

#cv2.imshow('asa',gray)

faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)

eyes = eyeCascade.detectMultiScale(
    gray,
    scaleFactor = 1.8,
    minNeighbors=1,
    minSize=(15,15),
    flags = cv2.cv.CV_HAAR_SCALE_IMAGE
)
print "faces detected: {0}".format(len(faces))
print "Eyes Detected: {0}".format(len(faces))
i = 0
for (x,y,w,h) in faces:
    #print faces 
    #print "\n"
    #cv2.rectangle(image,(x+int(w*0.15),y+int(h*0.15)),(x+int(w*0.80),y+int(h*0.90)),(0,255,0),2)
    for (ex,ey,ew,eh) in eyes:
        cv2.rectangle(image,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)      


#print type(faces[0][0])
cv2.imshow('FacesFound', image)
cv2.waitKey(0)

#corp_im = image[150:172,188:210]



#print "Corped Eye: "
#corp_gray = cv2.cvtColor(corp_im,cv2.COLOR_BGR2GRAY)
#cv2.imshow('sadasda',corp_gray)

#print corp_gray

faces detected: 3
Eyes Detected: 3
faces detected: 3
Eyes Detected: 3
Out[50]: -1

print eyes
[[467 179  20  20]
 [322 182  20  20]
 [439 288  20  20]
 [355 101  36  36]
 [294 116  36  36]
 [215 157  36  36]
 [152 161  36  36]
 [460 169  36  36]
 [512 174  36  36]
 [338  89  65  65]
 [276 244  65  65]
 [392 260  65  65]
 [554 201 117 117]]

len(eyes)
Out[52]: 13

cv2.imshow('',image)

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3
15

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3
15

%run "C:\Users\Manish\Desktop\init.py"
faces detected: 3
Eyes Detected: 3
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
C:\Users\Manish\Desktop\init.py in <module>()
     48 #print type(faces[0][0])
     49 cv2.imshow('FacesFound', image)
---> 50 cv2.rectangle(overlay, (100, 200), (150, 300),
     51 (0, 0, 255), -1)
     52 print ep

NameError: name 'overlay' is not defined 

image = cv2.imread('sample1.jpg')

im = cv2.imread('sample3.jpg')

cv2.imshow(image)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-61-2aec56f75318> in <module>()
----> 1 cv2.imshow(image)

TypeError: Required argument 'mat' (pos 2) not found 

cv2.imshow(i'',mage)
  File "<ipython-input-62-702d3d778977>", line 1
    cv2.imshow(i'',mage)
                 ^
SyntaxError: invalid syntax
 

cv2.imshow('',image)

cv2.imshow('',im)

cv2.addWeighted(im,0.8,image,0.2))
  File "<ipython-input-65-3e6df28c421e>", line 1
    cv2.addWeighted(im,0.8,image,0.2))
                                     ^
SyntaxError: invalid syntax
 

cv2.addWeighted(im,0.8,image,0.2)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-66-4c958ac2223d> in <module>()
----> 1 cv2.addWeighted(im,0.8,image,0.2)

TypeError: Required argument 'gamma' (pos 5) not found 

cv2.addWeighted(im,0.8,image,0.2,0)
---------------------------------------------------------------------------
error                                     Traceback (most recent call last)
<ipython-input-67-ab200b33c14e> in <module>()
----> 1 cv2.addWeighted(im,0.8,image,0.2,0)

error: C:\pisi\tmp\opencv-2.4.9-5\work\opencv-2.4.9\modules\core\src\arithm.cpp:1287: error: (-209) The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array' in function cv::arithm_op
 
OpenCV Error: Sizes of input arguments do not match (The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array') in cv::arithm_op, file C:\pisi\tmp\opencv-2.4.9-5\work\opencv-2.4.9\modules\core\src\arithm.cpp, line 1287

dst = cv2.addWeighted(im,0.8,image,0.2,0)
OpenCV Error: Sizes of input arguments do not match (The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array') in cv::arithm_op, file C:\pisi\tmp\opencv-2.4.9-5\work\opencv-2.4.9\modules\core\src\arithm.cpp, line 1287
---------------------------------------------------------------------------
error                                     Traceback (most recent call last)
<ipython-input-68-30ed34d65c0d> in <module>()
----> 1 dst = cv2.addWeighted(im,0.8,image,0.2,0)

error: C:\pisi\tmp\opencv-2.4.9-5\work\opencv-2.4.9\modules\core\src\arithm.cpp:1287: error: (-209) The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array' in function cv::arithm_op
 

cv2.imshow('',dst)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-69-ed1299c5785c> in <module>()
----> 1 cv2.imshow('',dst)

NameError: name 'dst' is not defined 

image = cv2.imread('g1.jpg')

im = cv2.imread('g2.jpg')

cv2.imshow('',image)

cv2.imshow('',im)

dst = cv2.addWeighted(image,0.7,im,0.3,0)

cv2.imshow('',dst)

dst = cv2.addWeighted(image,0.6,im,0.4,0)

cv2.imshow('',dst)

dst = cv2.addWeighted(image,0.5,im,0.5,0)

cv2.imshow('',dst)
